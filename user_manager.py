import json
import os
import time
from typing import Optional, Dict, Any


class UserManager:
    def __init__(self):
        self.users_file = "users_data.json"

    def get_file_update_time(self, course):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (Excel), —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å –ª–∏ –æ–Ω–æ.
        –í–ê–ñ–ù–û: course —Å—é–¥–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —É–∂–µ –∫–∞–∫ "1 –∫—É—Ä—Å" / "2 –∫—É—Ä—Å" –∏ —Ç.–ø.
        """
        from config import EXCEL_URLS
        file_path = EXCEL_URLS.get(course)
        if file_path and os.path.exists(file_path):
            return os.path.getmtime(file_path)
        return 0

    def save_user_choice(self, user_id: int, course: str, group: str, base: str = "9") -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (course, group –∏ base).
        –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã.
        """
        users_data = self.load_all_users()
        users_data[str(user_id)] = {
            "base": base,           # "9" –∏–ª–∏ "11"
            "course": course,       # "1 –∫—É—Ä—Å"
            "group": group,         # "–ò–°25—Å"
            "last_update_time": time.time(),
            "file_update_time": self.get_file_update_time(course if course else "1 –∫—É—Ä—Å")
        }

        with open(self.users_file, 'w', encoding='utf-8') as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)

    def get_user_choice(self, user_id: int) -> Optional[Dict[str, Any]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (base, course, group).
        """
        users_data = self.load_all_users()
        return users_data.get(str(user_id))

    def should_update_schedule(self, user_id, course):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ç–µ–º,
        –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω—è–ª –≤—ã–±–æ—Ä.
        """
        user_data = self.get_user_choice(user_id)
        if not user_data:
            return True

        user_time = user_data.get("file_update_time", 0)
        file_time = self.get_file_update_time(course)

        print(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: user={user_time}, file={file_time}, update={file_time > user_time}")
        return file_time > user_time

    def load_all_users(self) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON.
        """
        if os.path.exists(self.users_file):
            try:
                with open(self.users_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except (json.JSONDecodeError, IOError):
                return {}
        return {}
