import os
import re
import tempfile
from typing import Optional, Dict, Any, List
import requests
from openpyxl import load_workbook
from openpyxl.cell import Cell

from config import LESSON_TIMES, GROUP_CODES


class ExcelParser:
    def __init__(self):
        self.temp_files: List[str] = []

    def download_excel(self, url: str) -> Optional[str]:
        try:
            if url.startswith('http'):
                response = requests.get(url, timeout=30)
                response.raise_for_status()

                temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx')
                temp_file.write(response.content)
                temp_file.close()

                self.temp_files.append(temp_file.name)
                return temp_file.name
            else:
                # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é
                if os.path.exists(url):
                    import shutil  # ‚Üê –∏–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞
                    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx')
                    shutil.copy2(url, temp_file.name)  # ‚Üê –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
                    self.temp_files.append(temp_file.name)
                    return temp_file.name
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None

    def cleanup_temp_files(self) -> None:
        for temp_file in self.temp_files:
            try:
                if os.path.exists(temp_file):
                    os.unlink(temp_file)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        self.temp_files.clear()

    @staticmethod
    def get_cell_color_type(cell: Cell) -> str:
        try:
            if cell.fill.start_color and cell.fill.start_color.index == 9:
                return "distant"  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–Ω–∞—è —è—á–µ–π–∫–∞
            return "normal"
        except (AttributeError, TypeError, ValueError):
            return "normal"

    @staticmethod
    def is_valid_group_name(group_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã"""
        text = str(group_name).strip()

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ
        if not text:
            return False

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ –Ω–µ-–≥—Ä—É–ø–ø—ã
        if any(word in text.lower() for word in ['—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–∑–∞–Ω—è—Ç–∏–π', '—Å–µ–º–µ—Å—Ç—Ä', '—É—á–µ–±–Ω—ã–π', '–≥–æ–¥', '‚Ññ']):
            return False

        # –ì—Ä—É–ø–ø—ã –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –∫–æ—Ä–æ—Ç–∫–∏–µ
        if len(text) > 15:
            return False

        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        has_letters = any(c.isalpha() for c in text)
        has_digits = any(c.isdigit() for c in text)

        return has_letters and has_digits

    @staticmethod
    def is_group_in_course(group_name: str, course: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ –∫ –∫—É—Ä—Å—É –ø–æ –±—É–∫–≤–µ–Ω–Ω–æ–º—É –∫–æ–¥—É"""
        group_codes = GROUP_CODES.get(course, [])
        group_name_str = str(group_name).upper().strip()

        # –ò—â–µ–º –ª—é–±–æ–π –∏–∑ –∫–æ–¥–æ–≤ –≥—Ä—É–ø–ø –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        for code in group_codes:
            if code.upper() in group_name_str:
                return True
        return False

    def find_groups_in_excel(self, excel_content: str, course: str) -> List[str]:
        try:
            print(f"üîç –ò—â—É –≥—Ä—É–ø–ø—ã –¥–ª—è –∫—É—Ä—Å–∞: {course}")
            excel_path = self.download_excel(excel_content)
            if not excel_path:
                return []

            wb = load_workbook(excel_path)
            ws = wb.active

            groups = []
            # –ò—â–µ–º –≤ —Å—Ç—Ä–æ–∫–µ 6 (—Å –∫–æ–ª–æ–Ω–∫–∏ 4, –ø–æ—Å–ª–µ "‚Ññ")
            for col in range(4, ws.max_column + 1):
                cell_value = ws.cell(row=6, column=col).value
                if cell_value:
                    group_name = str(cell_value).strip()
                    print(f"üéØ –°—Ç—Ä–æ–∫–∞ 6, –∫–æ–ª–æ–Ω–∫–∞ {col}: '{group_name}'")

                    if group_name and group_name != "‚Ññ":
                        is_valid = self.is_valid_group_name(group_name)
                        in_course = self.is_group_in_course(group_name, course)
                        print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω–∞: {is_valid}, –í –∫—É—Ä—Å–µ: {in_course}")

                        if is_valid and in_course:
                            groups.append(group_name)
                            print(f"   üéØ –î–û–ë–ê–í–õ–ï–ù–ê –ì–†–£–ü–ü–ê: {group_name}")

            print(f"üìã –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø: {groups}")
            wb.close()
            return groups

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
            return []
        finally:
            if excel_content.startswith('http'):
                self.cleanup_temp_files()

    def get_group_schedule(self, excel_content: str, group_name: str) -> Optional[Dict[str, Any]]:
        try:
            total_lessons = 0
            distant_lessons = 0
            self_study_lessons = 0
            normal_lessons = 0
            current_day = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
            excel_path = self.download_excel(excel_content)
            if not excel_path:
                return None

            wb = load_workbook(excel_path)
            ws = wb.active

            # –ò—â–µ–º –≥—Ä—É–ø–ø—É –≤ —Å—Ç—Ä–æ–∫–µ 6
            group_col = None
            for col in range(4, ws.max_column + 1):  # —Å –∫–æ–ª–æ–Ω–∫–∏ D
                cell_value = ws.cell(row=6, column=col).value
                if cell_value and group_name.upper() in str(cell_value).upper():
                    group_col = col
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ '{group_name}' –≤ –∫–æ–ª–æ–Ω–∫–µ {col}")
                    break

            if not group_col:
                return None

            schedule = {}
            _current_day = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"

            # –ü–∞—Ä—Å–∏–º –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ 7
            for row in range(7, ws.max_row + 1):
                day_cell = ws.cell(row=row, column=1)  # —è—á–µ–π–∫–∞ –¥–Ω—è
                time_cell = ws.cell(row=row, column=2)  # —è—á–µ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                lesson_num_cell = ws.cell(row=row, column=3)  # —è—á–µ–π–∫–∞ –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—ã
                lesson_cell = ws.cell(row=row, column=group_col)  # —è—á–µ–π–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
                if day_cell.value and str(day_cell.value).strip():
                    current_day = str(day_cell.value).strip().split()[0]  # "–°—Ä–µ–¥–∞ 8 –æ–∫—Ç—è–±—Ä—è" ‚Üí "–°—Ä–µ–¥–∞"

                if not lesson_num_cell.value:
                    continue

                try:
                    lesson_num = int(lesson_num_cell.value)
                except (ValueError, TypeError):
                    continue

                color_type = self.get_cell_color_type(lesson_cell)  # –ø–µ—Ä–µ–¥–∞–µ–º —è—á–µ–π–∫—É –¥–ª—è —Ü–≤–µ—Ç–∞

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                if lesson_cell.value and str(lesson_cell.value).strip():
                    total_lessons += 1
                    if color_type == "distant":
                        distant_lessons += 1
                    elif color_type == "self_study":
                        self_study_lessons += 1
                    else:
                        normal_lessons += 1

                if lesson_cell.value and str(lesson_cell.value).strip():
                    lesson_text = str(lesson_cell.value).strip()
                    parsed = self.parse_lesson_text(lesson_text)

                    print(f"üìù –°—Ç—Ä–æ–∫–∞ {row}: '{lesson_text}' ‚Üí {parsed}")  # –æ—Ç–ª–∞–¥–∫–∞

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    if color_type == "distant":
                        subject_text = f"üíª {parsed['subject']} (–¥–∏—Å—Ç–∞–Ω—Ç)"
                    elif color_type == "self_study":
                        subject_text = f"üìö {parsed['subject']} (—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è)"
                    else:
                        subject_text = parsed['subject']

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è
                    lesson_time = str(time_cell.value).strip() if time_cell.value else self.get_lesson_time(lesson_num)

                    schedule[lesson_num] = {
                        "day": current_day,
                        "time": lesson_time,
                        "subject": subject_text,
                        "teacher": parsed["teacher"],
                        "room": parsed["room"],
                        "color_type": color_type,
                        "subgroup": parsed.get("subgroup", "")
                    }
                else:
                    lesson_time = str(time_cell.value).strip() if time_cell.value else self.get_lesson_time(lesson_num)
                    schedule[lesson_num] = {
                        "day": current_day,
                        "time": lesson_time,
                        "subject": "‚ùå –ù–µ—Ç –ø–∞—Ä—ã",
                        "teacher": "",
                        "room": "",
                        "color_type": "normal",
                        "subgroup": ""
                    }

            wb.close()

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_data = {
                "total": total_lessons,
                "distant": distant_lessons,
                "self_study": self_study_lessons,
                "normal": normal_lessons
            }

            print(f"üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ: {len(schedule)} –ø–∞—Ä")

            return {
                "schedule": schedule,
                "stats": stats_data
            }

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return None
        finally:
            if excel_content.startswith('http'):
                self.cleanup_temp_files()

    @staticmethod
    def parse_lesson_text(lesson_text: str) -> Dict[str, str]:
        """–§–∏–Ω–∞–ª—å–Ω—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä"""
        text = str(lesson_text).strip()

        if not text:
            return {"subject": "‚ùå –ù–µ—Ç –ø–∞—Ä—ã", "teacher": "", "room": "", "subgroup": ""}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
        special_lessons = {
            '—Ä–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º': 'üí¨ –ó–∞–Ω—è—Ç–∏–µ "–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º"'
        }

        text_lower = text.lower()
        for pattern, replacement in special_lessons.items():
            if pattern in text_lower:
                return {
                    "subject": replacement,
                    "teacher": "–í–Ω–µ—É—Ä–æ—á–Ω–æ–µ",
                    "room": "?",
                    "subgroup": ""
                }

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
        text = ' '.join(text.split())
        print(f"üîç –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: '{text}'")

        # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–¥–≥—Ä—É–ø–ø—ã
        subgroup = ""
        subgroup_patterns = [
            r'(\d\s?–∏\s?\d\s?[–ø]?–æ–¥?–≥—Ä?)',
            r'(\d\s?[–ø]?–æ–¥?–≥—Ä?)',
        ]

        for pattern in subgroup_patterns:
            subgroup_match = re.search(pattern, text, re.IGNORECASE)
            if subgroup_match:
                subgroup = subgroup_match.group(1)
                subgroup = re.sub(r'(\d)([–∞-—è])', r'\1 \2', subgroup)
                subgroup = re.sub(r'(\d)(–∏)(\d)', r'\1 \2 \3', subgroup)
                subgroup = re.sub(r'\s+', ' ', subgroup).strip()
                text = re.sub(pattern, '', text, flags=re.IGNORECASE).strip()
                break

        print(f"üìå –ü–æ–¥–≥—Ä—É–ø–ø–∞: '{subgroup}'")

        # 2. –ò—â–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        rooms = []
        room_pattern = r'\b(\d{2,4}[A-Z–ê-–Ø]?)\b'
        room_matches = re.findall(room_pattern, text)

        for room_match in room_matches:
            if 2 <= len(room_match) <= 5:
                rooms.append(room_match)
                text = re.sub(r'\b' + re.escape(room_match) + r'\b', ' ', text).strip()

        print(f"üìç –ê—É–¥–∏—Ç–æ—Ä–∏–∏: {rooms}")

        # 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è
        special_rooms = ['–∑–∞–ª', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '—á–∏—Ç', '–∞–∫—Ç–æ–≤—ã–π', '—Å–ø–æ—Ä—Ç–∑–∞–ª', '—Å—Ç–∞–¥–∏–æ–Ω']
        for room_word in special_rooms:
            if room_word in text.lower():
                rooms.append(room_word.capitalize())
                text = re.sub(room_word, ' ', text, flags=re.IGNORECASE).strip()

        # 4. –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        known_teachers = [
            '–®–ø–µ–π—Ç', '–¢–∞—Ä–∞–Ω', '–ú–æ—Ä–æ–∑–æ–≤–∞', '–°–æ–∫–æ–ª–æ–≤–∞', '–û–ª–µ—à–∫–µ–≤–∏—á', '–î–æ–≥–∞–¥–∏–Ω',
            '–î–µ–Ω–∏—Å–æ–≤', '–ó—ã–∫–æ–≤–∞', '–õ–æ–±–∞–Ω–æ–≤', '–ö–æ—Ä–æ—Ç–∫–æ–≤', '–ë—É—Ö–∞—Ç–∏–µ–≤–∞', '–ö–æ–≤—Ä–∏–∂–Ω—ã—Ö',
            '–ì–æ–≥–æ–ª–µ–≤–∞', '–ì—É–±–∏—á'  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–´ –ù–û–í–´–ï –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ò
        ]

        # 5. –ò—â–µ–º –¢–û–õ–¨–ö–û –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        teachers = []
        words = text.split()

        for word in words:
            word_clean = re.sub(r'[^–ê-–Ø–∞-—è]', '', word)

            # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            if word_clean in known_teachers:
                teachers.append(word_clean)
                text = text.replace(word, ' ', 1).strip()

        print(f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: {teachers}")

        # 6. –°–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç - —ç—Ç–æ –ø—Ä–µ–¥–º–µ—Ç
        subject = ' '.join(text.split()).strip()

        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        subject = re.sub(r'^[,\s\-‚Äì‚Äî()]+|[,\s\-‚Äì‚Äî()]+$', '', subject)
        subject = re.sub(r'\s+', ' ', subject)

        # 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_subject = subject if subject else "?"
        final_teacher = ", ".join(teachers) if teachers else ""
        final_room = ", ".join(rooms) if rooms else ""

        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: subject='{final_subject}', teacher='{final_teacher}', "
              f"room='{final_room}', subgroup='{subgroup}'")

        return {
            "subject": final_subject,
            "teacher": final_teacher,
            "room": final_room,
            "subgroup": subgroup
        }

    @staticmethod
    def _parse_single_subject(text: str, subgroup: str = "") -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π"""
        if not text:
            return {"subject": "?", "teacher": "", "room": "", "subgroup": subgroup}

        # –ò—â–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é (—Ü–∏—Ñ—Ä—ã 2-4 –∑–Ω–∞–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –±—É–∫–≤–æ–π –≤ –∫–æ–Ω—Ü–µ)
        room = "?"
        room_pattern = r'(\d{2,4}[A-Z–ê-–Ø]?\b)'
        room_match = re.search(room_pattern, text)
        if room_match:
            room = room_match.group(1)
            text = re.sub(room_pattern, '', text).strip()

        # –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è
        special_rooms = ['–∑–∞–ª', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '—á–∏—Ç', '–∞–∫—Ç–æ–≤—ã–π', '—Å–ø–æ—Ä—Ç–∑–∞–ª', '—Å—Ç–∞–¥–∏–æ–Ω']
        for room_word in special_rooms:
            if room_word in text.lower():
                room = room_word.capitalize()
                text = re.sub(room_word, '', text, flags=re.IGNORECASE).strip()
                break

        # –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Å–ª–æ–≤–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ –±—É–∫–≤)
        teacher = ""
        words = text.split()
        teacher_words = []
        remaining_words = []

        for word in words:
            if (len(word) > 2 and
                    word[0].isupper() and
                    word.isalpha() and
                    word.lower() not in ['–∑–∞–ª', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '—á–∏—Ç', '–∞–∫—Ç–æ–≤—ã–π', '–ø–¥–≥—Ä', '–ø–æ–¥–≥—Ä'] and
                    not any(special_room in word.lower() for special_room in special_rooms)):
                teacher_words.append(word)
            else:
                remaining_words.append(word)

        if teacher_words:
            teacher = " ".join(teacher_words)
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = ' '.join(remaining_words).strip()

        # –û—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç - —ç—Ç–æ –ø—Ä–µ–¥–º–µ—Ç
        subject = text.strip()

        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        subject = re.sub(r'^[,\s-]+|[,\s-]+$', '', subject)

        return {
            "subject": subject if subject else "?",
            "teacher": teacher,
            "room": room,
            "subgroup": subgroup
        }

    @staticmethod
    def get_lesson_time(lesson_num: int) -> str:
        return LESSON_TIMES.get(lesson_num, "?")
