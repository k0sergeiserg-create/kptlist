import logging

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from config import BOT_TOKEN, EXCEL_URLS
from exel_parser import ExcelParser
from user_manager import UserManager

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)


class ScheduleBot:
    def __init__(self):
        logging.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ScheduleBot...")

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ö—Ä–∞–Ω–∏—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã/–∫—É—Ä—Å–∞/–±–∞–∑—ã)
        self.user_manager = UserManager()

        # –ü–∞—Ä—Å–µ—Ä Excel-—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.parser = ExcelParser()

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞/–≥—Ä—É–ø–ø—ã
        self.temp_data = {}

    # üî• NEW: –≤—ã–±–æ—Ä –±–∞–∑—ã (9/11)
    @staticmethod
    def get_base_keyboard() -> ReplyKeyboardMarkup:
        return ReplyKeyboardMarkup([
            [KeyboardButton("üßë‚Äçüè´ 9 –∫–ª–∞—Å—Å–æ–≤"), KeyboardButton("üéì 11 –∫–ª–∞—Å—Å–æ–≤")]
        ], resize_keyboard=True)

    def get_courses_keyboard(self, with_back=False):
        # –ë–µ—Ä—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ base —É–∂–µ –≤—ã–±—Ä–∞–Ω)
        # user_id –≤ –Ω–µ—ë –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è
        base = None
        if self.temp_data:
            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π user_id –∏–∑ —Å–ª–æ–≤–∞—Ä—è (—Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            any_user = next(iter(self.temp_data))
            base = self.temp_data[any_user].get("base", "9")

        if base == "11":
            buttons = ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å"]
        else:
            buttons = ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å", "4 –∫—É—Ä—Å"]

        if with_back:
            buttons.append("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è")

        return ReplyKeyboardMarkup([[b] for b in buttons], resize_keyboard=True)

    @staticmethod
    def get_groups_keyboard(groups: list, with_back: bool = True) -> ReplyKeyboardMarkup:
        keyboard = []

        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ groups ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        groups = [str(g) for g in groups]

        for i in range(0, len(groups), 3):
            keyboard.append([KeyboardButton(group) for group in groups[i:i + 3]])
        if with_back:
            keyboard.append([KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è")])
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    @staticmethod
    def get_main_keyboard() -> ReplyKeyboardMarkup:
        keyboard = [
            [KeyboardButton("üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    # üîÑ MODIFIED: /start —Ç–µ–ø–µ—Ä—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±–∞–∑—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        saved_choice = self.user_manager.get_user_choice(user_id)

        print(f"üîç START: user_id={user_id}, saved_choice={saved_choice}")

        if saved_choice and saved_choice.get("course") and saved_choice.get("group") and saved_choice.get("base"):
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –¥–ª—è –±–∞–∑—ã 11 —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ –∫—É—Ä—Å +1
            excel_course = self._compute_excel_course(saved_choice["course"], saved_choice["base"])
            should_update = self.user_manager.should_update_schedule(user_id, excel_course)
            print(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {should_update} (excel_course={excel_course})")

            if should_update:
                print("üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û! –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é...")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–Ω–æ–≤–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–±–Ω–æ–≤–∏–º file_update_time)
                self.user_manager.save_user_choice(user_id, saved_choice["course"], saved_choice["group"],
                                                   saved_choice["base"])
                await update.message.reply_text(
                    f"üîÑ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!**\n"
                    f"–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {saved_choice['group']}\n"
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                    reply_markup=self.get_main_keyboard(),
                    parse_mode='Markdown'
                )
                return

            await update.message.reply_text(
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n–¢–≤–æ—è –≥—Ä—É–ø–ø–∞: {saved_choice['group']}\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=self.get_main_keyboard()
            )
        else:
            # üî• NEW: –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –±–∞–∑—É (9/11)
            await update.message.reply_text(
                "üéì –ë–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ü–æ–ª–∏—Ç–µ—Ö–∞\n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –±–∞–∑—É –æ–±—É—á–µ–Ω–∏—è:",
                reply_markup=self.get_base_keyboard()
            )

    # üî• NEW: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã (9/11)
    async def handle_base_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        text = update.message.text
        user_id = update.effective_user.id

        base = None
        if text.startswith("üßë‚Äçüè´") or "9" in text:
            base = "9"
        elif text.startswith("üéì") or "11" in text:
            base = "11"

        if not base:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏ –±–∞–∑—É –æ–±—É—á–µ–Ω–∏—è:",
                                            reply_markup=self.get_base_keyboard())
            return

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ temp_data, –¥–∞–ª—å—à–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞/–≥—Ä—É–ø–ø—ã –∑–∞–ø–∏—à–µ–º –≤ UserManager
        self.temp_data[user_id] = {"base": base}
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–∞–∑—É: {base}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫—É—Ä—Å:",
                                        reply_markup=self.get_courses_keyboard(with_back=True   ))

    # üîÑ MODIFIED: –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞ —É—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑—É –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª excel –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–¥–ª—è –±–∞–∑—ã 11 –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å+1)
    async def handle_course_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        course_text = update.message.text  # –ù–∞–ø—Ä–∏–º–µ—Ä "2 –∫—É—Ä—Å"

        # –ù–∞–∑–∞–¥ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –±–∞–∑—ã
        if course_text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è":
            self.temp_data[user_id] = {}
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –±–∞–∑—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=self.get_base_keyboard())
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É—Ä—Å (—á–∏—Å–ª–æ)
        try:
            course_num = int(course_text.split()[0])  # 2
        except Exception:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å. –í—ã–±–µ—Ä–∏ –µ—â—ë —Ä–∞–∑.",
                                            reply_markup=self.get_courses_keyboard())
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑—É
        base = self.temp_data.get(user_id, {}).get("base", "9")

        # –í—ã–±–∏—Ä–∞–µ–º Excel-—Ñ–∞–π–ª
        if base == "11":
            excel_course_num = min(course_num + 1, 4)
        else:
            excel_course_num = course_num

        excel_course_key = f"{excel_course_num} –∫—É—Ä—Å"
        excel_url = EXCEL_URLS.get(excel_course_key)

        if not excel_url:
            await update.message.reply_text("‚ùå –§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã
        groups = self.parser.find_groups_in_excel(excel_url, excel_course_key)
        if not groups:
            await update.message.reply_text("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–∑–µ
        if base == "11":
            filtered_groups = [str(g) for g in groups if str(g).lower().endswith("—Å")]
        else:
            filtered_groups = [str(g) for g in groups if not str(g).lower().endswith("—Å")]

        if not filtered_groups:
            await update.message.reply_text("‚ùå –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±–∞–∑–µ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –±–∞–∑—É/–∫—É—Ä—Å.",
                                            reply_markup=self.get_courses_keyboard(with_back=True))
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self.temp_data[user_id] = {
            "base": base,
            "course": course_num,  # —Å—Ç—Ä–æ–≥–æ INT
            "excel_course_key": excel_course_key,
            "excel_url": excel_url,
            "available_groups": filtered_groups
        }

        # –í—ã–≤–æ–¥–∏–º
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É:",
            reply_markup=self.get_groups_keyboard(filtered_groups)
        )

        # üîÑ MODIFIED: –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º base + course + group (–¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ excel —Å–æ—Ö—Ä–∞–Ω—è–µ–º group –∫–∞–∫ –≤ —Ñ–∞–π–ª–µ)

    async def handle_group_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        group = update.message.text

        # –ù–∞–∑–∞–¥ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞
        if group == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è":
            temp = self.temp_data.get(user_id, {})
            base = temp.get("base", "9")
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=self.get_courses_keyboard(with_back=True))
            return

        temp = self.temp_data.get(user_id)
        if not temp:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ —Å /start")
            return

        base = temp.get("base", "9")
        course = temp.get("course")
        excel_course_key = self._compute_excel_course(course, base)

        self.user_manager.save_user_choice(user_id, str(course), group, base)
        if user_id in self.temp_data:
            del self.temp_data[user_id]

        await update.message.reply_text(
            f"‚úÖ –ì—Ä—É–ø–ø–∞ {group} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=self.get_main_keyboard()
        )

    async def handle_get_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id
        user_choice = self.user_manager.get_user_choice(user_id)

        if not user_choice:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /start")
            return

        course = user_choice["course"]
        group = user_choice["group"]
        base = user_choice.get("base", "9")

        excel_course_key = self._compute_excel_course(course, base)
        excel_url = EXCEL_URLS.get(excel_course_key)

        await update.message.reply_text(f"üîç –ò—â—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}... ")

        result_data = self.parser.get_group_schedule(excel_url, group)

        if result_data and isinstance(result_data, dict) and "schedule" in result_data:
            formatted = self.format_schedule(result_data, group)
            if len(formatted) > 4096:
                parts = [formatted[i:i + 4096] for i in range(0, len(formatted), 4096)]
                for part in parts:
                    await update.message.reply_text(part)
            else:
                await update.message.reply_text(formatted)
        else:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {group}")

    async def handle_change_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.effective_user.id

        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞ –∏ –≥—Ä—É–ø–ø—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑—É (–µ—Å–ª–∏ –±—ã–ª–∞)
        prev_base = self.user_manager.get_user_choice(user_id).get("base", "")

        if prev_base:
            # –ï—Å–ª–∏ –±–∞–∑–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Ä–∞–Ω–µ–µ ‚Äî —Å—Ä–∞–∑—É –≤–µ–¥—ë–º –Ω–∞ –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞
            self.temp_data[user_id] = {"base": prev_base}
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å:", reply_markup=self.get_courses_keyboard(with_back=True))
        else:
            # –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≤—ã–±–æ—Ä –±–∞–∑—ã
            self.user_manager.save_user_choice(user_id, "", "", "")
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –±–∞–∑—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=self.get_base_keyboard())


    def format_schedule(self, data: dict, group: str) -> str:
        schedule = data.get("schedule", {})
        stats = data.get("stats", {})

        if not schedule:
            return f"‚ùå –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {group}"

        days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
        result = [f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã -{group}-:\n"]

        # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–Ω—è–º
        day_blocks = {}
        for lesson_num, info in schedule.items():
            day = info["day"]
            if day not in day_blocks:
                day_blocks[day] = []
            day_blocks[day].append((lesson_num, info))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø–æ –ø–æ—Ä—è–¥–∫—É –¥–Ω–µ–π
        for day in days_order:
            if day in day_blocks:
                result.append(f" - {day}: -\n")
                for lesson_num, info in sorted(day_blocks[day]):
                    subj = info["subject"]
                    time = info["time"]
                    room = info["room"]
                    teacher = info["teacher"]
                    subgroup = f" | –ü–æ–¥–≥—Ä—É–ø–ø–∞: {info['subgroup']}" if info["subgroup"] else ""

                    result.append(f"{lesson_num}Ô∏è. {time} ‚Äî {subj} \nüë®‚Äçüè´ {teacher} | üö™ {room}{subgroup}\n")

        # –î–æ–±–∞–≤–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        result.append(
            f"üìä -–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: \n"
            f"–í—Å–µ–≥–æ –ª–µ–Ω—Ç: {stats.get('total', 0)} \n"
            f"–û—á–Ω—ã—Ö –ª–µ–Ω—Ç: {stats.get('normal', 0)} \n"
            f"–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã—Ö –ª–µ–Ω—Ç: {stats.get('distant', 0)}"
        )

        return "\n".join(result)

        # üî• NEW: –ü–æ–º–æ—â–Ω–∏–∫ ‚Äî –≤—ã—á–∏—Å–ª—è–µ—Ç, –∫–∞–∫–æ–π –∫–ª—é—á EXCEL_URLS –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å

    def _compute_excel_course(self, course, base):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á Excel –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∞–∑—ã.
        course ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å int –∏–ª–∏ str ('2' –∏–ª–∏ '2 –∫—É—Ä—Å')
        base ‚Äî '9' –∏–ª–∏ '11'
        """
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫—É—Ä—Å –∫ int
        try:
            course_num = int(str(course).split()[0])
        except:
            course_num = 1

        # –ï—Å–ª–∏ –±–∞–∑–∞ 11 ‚Üí –∫—É—Ä—Å + 1
        if base == "11":
            course_num = min(course_num + 1, 4)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        return f"{course_num} –∫—É—Ä—Å"


def main() -> None:
    if not BOT_TOKEN or BOT_TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–û–¢_BOTFATHER":
        logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ config.py")
        return

    bot = ScheduleBot()
    application = Application.builder().token(BOT_TOKEN).build()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º handlers
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(MessageHandler(filters.Text(["üßë‚Äçüè´ 9 –∫–ª–∞—Å—Å–æ–≤", "üéì 11 –∫–ª–∞—Å—Å–æ–≤"]), bot.handle_base_selection))
    application.add_handler(MessageHandler(filters.Text(["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å", "4 –∫—É—Ä—Å", "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è"]),
                                           bot.handle_course_selection))
    application.add_handler(MessageHandler(filters.Text(["üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]), bot.handle_get_schedule))
    application.add_handler(MessageHandler(filters.Text(["üîÑ –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"]), bot.handle_change_group))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_group_selection))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


if __name__ == "__main__":
    main()